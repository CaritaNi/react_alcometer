{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from 'react';\nimport Styles from \"../styles/Styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Alcometer() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    weight = _useState2[0],\n    setWeight = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    bottles = _useState4[0],\n    setBottles = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    time = _useState6[0],\n    setTime = _useState6[1];\n  var _useState7 = useState('male'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    sex = _useState8[0],\n    setSex = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    result = _useState10[0],\n    setResult = _useState10[1];\n  var _useState11 = useState(\"green\"),\n    _useState12 = _slicedToArray(_useState11, 2),\n    resultColor = _useState12[0],\n    setResultColor = _useState12[1];\n  var gender = [{\n    label: 'Male',\n    value: 'male'\n  }, {\n    label: 'Female',\n    value: 'female'\n  }];\n  function calculate() {\n    var content = 0;\n    var litres = bottles * 0.33;\n    var gram = litres * 8 * 4.5;\n    var burning = weight / 10;\n    var remaining = gram - burning * time;\n    if (sex === 'male') {\n      remaining / (weight * 0.7), _readOnlyError(\"content\");\n    } else {\n      remaining / (weight * 0.6), _readOnlyError(\"content\");\n    }\n    setResult(content);\n    if (content > 0) {\n      setResult(content);\n    } else {\n      setResult(0);\n    }\n  }\n  var GetResultColor = function GetResultColor(input) {\n    var color;\n    if (input === 0) {\n      color = 'green';\n    } else if (input >= 0 && input < 0.03) {\n      color = 'green';\n    } else if (input >= 0.03 && input < 0.09) {\n      color = 'yellow';\n    } else if (input >= 0.09) {\n      color = 'red';\n    }\n    console.log(\"changed color to \" + color);\n    return color;\n  };\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsx(Text, {\n      style: Styles.title,\n      children: \"Alcometer\"\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        style: Styles.label,\n        children: \"Weight : \"\n      }), _jsx(\"input\", {\n        id: \"weight\",\n        type: \"number\",\n        value: weight,\n        onChange: function onChange(e) {\n          return setWeight(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsx(Text, {\n        style: Styles.label,\n        children: \"Bottles :\"\n      }), _jsx(\"input\", {\n        id: \"bottles\",\n        type: \"number\",\n        value: bottles,\n        onChange: function onChange(e) {\n          return setBottles(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsx(Text, {\n        style: Styles.label,\n        children: \"Time :\"\n      }), _jsx(\"input\", {\n        id: \"time\",\n        type: \"number\",\n        value: time,\n        onChange: function onChange(e) {\n          return setTime(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsxs(View, {\n        style: Styles.radioButtonContainer,\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {},\n          style: Styles.radioButton,\n          children: _jsx(View, {\n            style: Styles.radioButtonIcon\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {},\n          children: _jsx(Text, {\n            style: Styles.radioButtonText,\n            children: \"Female\"\n          })\n        })]\n      }), _jsx(View, {\n        style: Styles.button\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return alcometer();\n        },\n        children: _jsx(Text, {\n          style: Styles.button,\n          children: \"SUBMIT\"\n        })\n      }), _jsx(\"label\", {\n        children: \"Result :\"\n      }), \" \", _jsx(\"br\", {}), _jsx(\"output\", {\n        children: result.toFixed(1)\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Styles","Alcometer","weight","setWeight","bottles","setBottles","time","setTime","sex","setSex","result","setResult","resultColor","setResultColor","gender","label","value","calculate","content","litres","gram","burning","remaining","GetResultColor","input","color","console","log","container","title","e","target","textInput","radioButtonContainer","radioButton","radioButtonIcon","radioButtonText","button","alcometer","toFixed"],"sources":["C:/Users/Toinen elämä/alcometer/react_alcometer/components/calculator.js"],"sourcesContent":["import { Button, Image, StyleSheet, Text, View } from 'react-native';\r\nimport React, {useState} from 'react';\r\nimport Styles from '../styles/Styles';\r\n\r\n\r\n\r\nexport default function Alcometer(){\r\n  const [weight, setWeight] = useState(0);\r\n  const [bottles, setBottles] = useState(0);\r\n  const [time, setTime] = useState(0);\r\n  const [sex, setSex] = useState('male');\r\n  const [result, setResult] = useState(0);\r\n\r\n  const [resultColor, setResultColor] = useState(\"green\");\r\n\r\n  const gender=[\r\n    {\r\n      label: 'Male',\r\n      value:'male'\r\n    },\r\n    {\r\n      label: 'Female',\r\n      value:'female'\r\n    }]\r\n  \r\n  \r\n    function calculate() {\r\n  \r\n      const content = 0;\r\n      const litres = bottles * 0.33;\r\n      const gram = litres * 8 * 4.5;\r\n      const burning = weight / 10;\r\n      const remaining = gram - (burning * time);\r\n  \r\n      if (sex === 'male'){\r\n        content= remaining / (weight * 0.7);\r\n      }\r\n      else {\r\n        content= remaining / (weight * 0.6);\r\n      }\r\n      setResult(content);\r\n      \r\n      if (content > 0){\r\n        setResult(content)\r\n      } else {\r\n        setResult(0)\r\n      }\r\n    }\r\n    \r\n    const GetResultColor = (input) => {\r\n      let color;\r\n      if (input === 0) {\r\n        color = 'green';\r\n      } else if (input >= 0 && input < 0.03) {\r\n        color = 'green';\r\n      } else if (input >= 0.03 && input < 0.09) {\r\n        color = 'yellow';\r\n      } else if (input >= 0.09) {\r\n        color = 'red';\r\n      }\r\n      console.log(\"changed color to \" + color);\r\n      return(color);\r\n  };\r\n  \r\n    \r\n    return (\r\n      <View style={Styles.container}>\r\n        <Text style={Styles.title}>Alcometer</Text>\r\n      <View>\r\n        <Text style={Styles.label}>Weight : </Text>\r\n          <input id='weight'\r\n          type='number'\r\n          value ={weight}\r\n          onChange={e=> setWeight(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n        <Text style={Styles.label}>Bottles :</Text>\r\n          <input id='bottles'\r\n          type='number'\r\n          value={bottles}\r\n          onChange={e=> setBottles(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n        <Text style={Styles.label}>Time :</Text>\r\n          <input id='time'\r\n          type='number'\r\n          value={time}\r\n          onChange={e=> setTime(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n      <View style={Styles.radioButtonContainer}>\r\n          <TouchableOpacity onPress={() => {}} style={Styles.radioButton}>\r\n      <View style={Styles.radioButtonIcon} />\r\n          </TouchableOpacity>\r\n          <TouchableOpacity onPress={() => {}}>\r\n          <Text style={Styles.radioButtonText}>Female</Text>\r\n          </TouchableOpacity>\r\n      </View>\r\n        \r\n        <View style={Styles.button}/>\r\n        <TouchableOpacity onPress = {() => alcometer()}>\r\n          <Text style={Styles.button}>SUBMIT</Text>\r\n        </TouchableOpacity>\r\n        <label>Result :</label> <br></br>\r\n        <output>{result.toFixed(1)}</output>\r\n      </View>\r\n    </View>\r\n    );\r\n  }\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}