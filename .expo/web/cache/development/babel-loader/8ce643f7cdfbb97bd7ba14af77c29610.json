{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport style from \"../styles/style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Alcometer = function Alcometer() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    weight = _useState2[0],\n    setWeight = _useState2[1];\n  var _useState3 = useState(1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    bottles = _useState4[0],\n    setBottles = _useState4[1];\n  var _useState5 = useState(1),\n    _useState6 = _slicedToArray(_useState5, 2),\n    time = _useState6[0],\n    setTime = _useState6[1];\n  var _useState7 = useState('male'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    sex = _useState8[0],\n    setSex = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    result = _useState10[0],\n    setResult = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isDarkMode = _useState12[0],\n    setIsDarkMode = _useState12[1];\n  var _useState13 = useState('green'),\n    _useState14 = _slicedToArray(_useState13, 2),\n    resultColor = _useState14[0],\n    setResultColor = _useState14[1];\n  var gender = [{\n    label: 'Male',\n    value: 'male'\n  }, {\n    label: 'Female',\n    value: 'female'\n  }];\n  function calculate() {\n    var litres = bottles * 0.33;\n    var gram = litres * 8 * 4.5;\n    var burning = weight / 10;\n    var remaining = gram - burning * time;\n    var content = null;\n    if (sex === 'male') {\n      content = remaining / (weight * 0.7);\n    } else {\n      content = remaining / (weight * 0.6);\n    }\n    setResult(content);\n    if (content > 0) {\n      setResult(content);\n    } else {\n      setResult(0);\n    }\n  }\n  function toggleDarkMode() {\n    setIsDarkMode(!isDarkMode);\n  }\n  return _jsxs(ScrollView, {\n    style: [style.container, isDarkMode ? style.darkContainer : style.lightContainer],\n    children: [_jsxs(View, {\n      style: style.header,\n      children: [_jsx(Text, {\n        style: [style.title, isDarkMode ? style.darkText : style.lightText],\n        children: \"Alcometer\"\n      }), _jsx(Switch, {\n        value: isDarkMode,\n        onValueChange: toggleDarkMode,\n        style: style.switch\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        style: [style.label, isDarkMode ? style.darkText : style.lightText],\n        children: \"Weight :\"\n      }), _jsx(TextInput, {\n        style: style.textInput,\n        keyboardType: \"number-pad\",\n        value: weight.toString(),\n        onChangeText: function onChangeText(text) {\n          return setWeight(text);\n        }\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(TextInput, {\n        style: style.textInput\n      }), _jsx(Text, {\n        style: [style.label, isDarkMode ? style.darkText : style.lightText],\n        children: \"Bottles :\"\n      }), _jsx(TextInput, {\n        style: style.textInput,\n        id: \"bottles\",\n        keyboardType: \"number-pad\",\n        value: bottles.toString(),\n        onChangeText: function onChangeText(text) {\n          return setBottles(text);\n        }\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(TextInput, {\n        style: style.textInput\n      }), _jsx(Text, {\n        style: [style.label, isDarkMode ? style.darkText : style.lightText],\n        children: \"Time :\"\n      }), _jsx(TextInput, {\n        style: style.textInput,\n        id: \"time\",\n        keyboardType: \"number-pad\",\n        value: time.toString(),\n        onChangeText: function onChangeText(text) {\n          return setTime(text);\n        }\n      })]\n    }), _jsxs(View, {\n      style: style.genderContainer,\n      children: [_jsx(Text, {\n        style: [style.label, isDarkMode ? style.darkText : style.lightText],\n        children: \"Gender\"\n      }), gender.map(function (option) {\n        return _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            return setSex(item.value);\n          },\n          children: [_jsx(View, {\n            style: style.radioButtonIcon\n          }), _jsx(Text, {\n            style: style.radioButtonText,\n            children: item.label\n          })]\n        }, option.value);\n      })]\n    }), _jsx(View, {\n      style: style.button,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return calculate();\n        },\n        children: _jsx(Text, {\n          style: style.buttonText,\n          children: \"SUBMIT \\u2665\"\n        })\n      })\n    }), _jsxs(Text, {\n      style: style.label,\n      children: [\"Result : \", result.toFixed(2)]\n    })]\n  });\n};\nexport default Alcometer;","map":{"version":3,"names":["React","useState","style","Alcometer","weight","setWeight","bottles","setBottles","time","setTime","sex","setSex","result","setResult","isDarkMode","setIsDarkMode","resultColor","setResultColor","gender","label","value","calculate","litres","gram","burning","remaining","content","toggleDarkMode","container","darkContainer","lightContainer","header","title","darkText","lightText","switch","textInput","toString","text","genderContainer","map","option","item","radioButtonIcon","radioButtonText","button","buttonText","toFixed"],"sources":["C:/Users/Toinen elämä/alcometer/react_alcometer/components/calculator.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, ScrollView, Switch, Text, TextInput, TouchableOpacity, View,} from 'react-native';\r\nimport style from '../styles/style';\r\n\r\nconst Alcometer = () => {\r\n  const [weight, setWeight] = useState(0);\r\n  const [bottles, setBottles] = useState(1);\r\n  const [time, setTime] = useState(1);\r\n  const [sex, setSex] = useState('male');\r\n  const [result, setResult] = useState(0);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [resultColor, setResultColor] = useState('green');\r\n\r\n  const gender = [\r\n  {label: 'Male',\r\n   value: 'male',\r\n  },{\r\n    label: 'Female',value: 'female',\r\n  },];\r\n\r\n  function calculate() {\r\n    const litres = bottles * 0.33;\r\n    const gram = litres * 8 * 4.5;\r\n    const burning = weight / 10;\r\n    const remaining = gram - burning * time;\r\n    let content = null;\r\n\r\n    if (sex === 'male') {\r\n      content = remaining / (weight * 0.7);\r\n    } else {\r\n      content = remaining / (weight * 0.6);\r\n    }\r\n\r\n    setResult(content);\r\n\r\n    if (content > 0) {\r\n      setResult(content);\r\n    } else {\r\n      setResult(0);\r\n    }\r\n  }\r\n\r\n  function toggleDarkMode() {\r\n    setIsDarkMode(!isDarkMode);\r\n  }\r\n\r\n  return (\r\n    <ScrollView\r\n      style={[\r\n        style.container,\r\n        isDarkMode ? style.darkContainer : style.lightContainer,\r\n      ]}\r\n    >\r\n      <View style={style.header}>\r\n        <Text style={[style.title, isDarkMode ? style.darkText : style.lightText]}>Alcometer</Text>\r\n        <Switch\r\n          value={isDarkMode}\r\n          onValueChange={toggleDarkMode}\r\n          style={style.switch}\r\n        />\r\n      </View>\r\n      <View>\r\n        <Text style={[style.label, isDarkMode ? style.darkText : style.lightText]}>Weight :</Text>\r\n        <TextInput\r\n          style={style.textInput}\r\n          keyboardType=\"number-pad\"\r\n          value={weight.toString()}\r\n          onChangeText={(text) => setWeight(text)}\r\n        />\r\n      </View>\r\n      <View>\r\n        <TextInput style={style.textInput} />\r\n        <Text style={[style.label, isDarkMode ? style.darkText : style.lightText]}>Bottles :</Text>\r\n        <TextInput\r\n          style={style.textInput}\r\n          id=\"bottles\"\r\n          keyboardType=\"number-pad\"\r\n          value={bottles.toString()}\r\n          onChangeText={(text) => setBottles(text)}\r\n        />\r\n      </View>\r\n      <View>\r\n        <TextInput style={style.textInput} />\r\n        <Text style={[style.label, isDarkMode ? style.darkText : style.lightText]}>Time :</Text>\r\n        <TextInput\r\n          style={style.textInput}\r\n          id=\"time\"\r\n          keyboardType=\"number-pad\"\r\n          value={time.toString()}\r\n          onChangeText={(text) => setTime(text)}\r\n        />\r\n      </View>\r\n\r\n      <View style={style.genderContainer}>\r\n        <Text style={[style.label, isDarkMode ? style.darkText : style.lightText]}>Gender</Text>\r\n        {gender.map((option) => (\r\n          <TouchableOpacity\r\n            key={option.value}\r\n            onPress={() => setSex(item.value)}\r\n            >\r\n              <View style={style.radioButtonIcon} />\r\n              <Text style={style.radioButtonText}>{item.label}</Text>\r\n            </TouchableOpacity>\r\n          ))}\r\n        </View>\r\n\r\n        <View style={style.button}>\r\n          <TouchableOpacity onPress={() => calculate()}>\r\n            <Text style={style.buttonText}>SUBMIT ♥</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        <Text style={style.label}>Result : {result.toFixed(2)}</Text>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default Alcometer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}