{"ast":null,"code":"import { StatusBar } from 'expo-status-bar';\nimport { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { radioButton } from \"react-native-web/dist/index\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Styles } from \"./styles/Styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsx(Text, {\n      style: Styles.title,\n      children: \"Alcometer\"\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        style: Styles.label,\n        children: \"Weight : \"\n      }), _jsx(\"input\", {\n        id: \"weight\",\n        type: \"number\",\n        value: weight,\n        onChange: function onChange(e) {\n          return setWeight(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsx(Text, {\n        style: Styles.label,\n        children: \"Bottles :\"\n      }), _jsx(\"input\", {\n        id: \"bottles\",\n        type: \"number\",\n        value: bottles,\n        onChange: function onChange(e) {\n          return setBottles(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsx(Text, {\n        style: Styles.label,\n        children: \"Time :\"\n      }), _jsx(\"input\", {\n        id: \"time\",\n        type: \"number\",\n        value: time,\n        onChange: function onChange(e) {\n          return setTime(e.target.value);\n        }\n      }), _jsx(TextInput, {\n        style: Styles.textInput\n      }), _jsxs(View, {\n        style: Styles.radioButtonContainer,\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {},\n          style: Styles.radioButton,\n          children: _jsx(View, {\n            style: Styles.radioButtonIcon\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {},\n          children: _jsx(Text, {\n            style: Styles.radioButtonText,\n            children: \"Female\"\n          })\n        })]\n      }), _jsx(View, {\n        style: Styles.button\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return alcometer();\n        },\n        children: _jsx(Text, {\n          style: Styles.button,\n          children: \"SUBMIT\"\n        })\n      }), _jsx(\"label\", {\n        children: \"Result :\"\n      }), \" \", _jsx(\"br\", {}), _jsx(\"output\", {\n        children: result.toFixed(1)\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default App;","map":{"version":3,"names":["StatusBar","useState","radioButton","Styles","App","container","title","label","weight","e","setWeight","target","value","textInput","bottles","setBottles","time","setTime","radioButtonContainer","radioButtonIcon","radioButtonText","button","alcometer","result","toFixed","styles","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/Toinen elämä/alcometer/react_alcometer/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { useState } from 'react';\r\nimport { Button, radioButton, Image, Pressable, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\nimport { Styles } from './styles/Styles';\r\n\r\nconst App = () => { \r\n\r\n\r\n\r\n  return (\r\n    <View style={Styles.container}>\r\n      <Text style={Styles.title}>Alcometer</Text>\r\n      <View>\r\n        <Text style={Styles.label}>Weight : </Text>\r\n          <input id='weight'\r\n          type='number'\r\n          value ={weight}\r\n          onChange={e=> setWeight(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n        <Text style={Styles.label}>Bottles :</Text>\r\n          <input id='bottles'\r\n          type='number'\r\n          value={bottles}\r\n          onChange={e=> setBottles(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n        <Text style={Styles.label}>Time :</Text>\r\n          <input id='time'\r\n          type='number'\r\n          value={time}\r\n          onChange={e=> setTime(e.target.value)}/>\r\n\r\n        <TextInput style={Styles.textInput}/>\r\n        <View style={Styles.radioButtonContainer}>\r\n          <TouchableOpacity onPress={() => {}} style={Styles.radioButton}>\r\n         <View style={Styles.radioButtonIcon} />\r\n          </TouchableOpacity>\r\n          <TouchableOpacity onPress={() => {}}>\r\n          <Text style={Styles.radioButtonText}>Female</Text>\r\n          </TouchableOpacity>\r\n\r\n          \r\n         </View>\r\n        \r\n        <View style={Styles.button}/>\r\n        <TouchableOpacity onPress = {() => alcometer()}>\r\n          <Text style={Styles.button}>SUBMIT</Text>\r\n        </TouchableOpacity>\r\n        <label>Result :</label> <br></br>\r\n        <output>{result.toFixed(1)}</output>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  }\r\n});\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}