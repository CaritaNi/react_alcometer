{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React, { useState } from 'react';\nimport Styles from \"../styles/Styles\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Radiobutton(_ref) {\n  var options = _ref.options,\n    onPress = _ref.onPress,\n    style = _ref.style,\n    borderColor = _ref.borderColor;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  function handlePress(selected) {\n    setValue(selected);\n    onPress(selected);\n  }\n  return _jsx(_Fragment, {\n    children: options.map(function (item, index) {\n      return _jsxs(View, {\n        style: [Styles.radioButtonContainer],\n        children: [_jsx(Text, {\n          style: styles.label,\n          children: item.label\n        }), _jsx(Pressable, {\n          style: [styles.circle, borderColor],\n          onPress: function onPress() {\n            return handlePress(item.value);\n          },\n          children: value === item.value && _jsx(View, {\n            style: [styles.checkedCircle, style]\n          })\n        })]\n      }, index);\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Styles","Radiobutton","options","onPress","style","borderColor","value","setValue","handlePress","selected","map","item","index","radioButtonContainer","styles","label","circle","checkedCircle"],"sources":["C:/Users/Toinen elämä/alcometer/react_alcometer/components/radiobutton.js"],"sourcesContent":["import { View, Text, Pressable } from 'react-native';\r\nimport React,{useState} from 'react';\r\nimport Styles from '../styles/Styles';\r\n\r\nexport default function Radiobutton({options, onPress, style, borderColor}) {\r\n    const[value, setValue]= useState(null);\r\n\r\n    function handlePress(selected){\r\n        setValue(selected);\r\n        onPress(selected);\r\n       \r\n    }\r\n    return (\r\n    <>\r\n      {\r\n        options.map((item, index)=>(\r\n            <View key={index} style={[Styles.radioButtonContainer]}>\r\n                <Text style={styles.label}>{item.label}</Text>\r\n                <Pressable style={[styles.circle,borderColor]} onPress={()=> handlePress(item.value)}>\r\n                  {value=== item.value && <View style={[styles.checkedCircle,style]}></View> }\r\n                </Pressable>\r\n            </View>\r\n            ) \r\n        )\r\n      }\r\n    </>\r\n  );\r\n}"],"mappings":";;;;AACA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,MAAM;AAAyB;AAAA;AAAA;AAEtC,eAAe,SAASC,WAAW,OAAyC;EAAA,IAAvCC,OAAO,QAAPA,OAAO;IAAEC,OAAO,QAAPA,OAAO;IAAEC,KAAK,QAALA,KAAK;IAAEC,WAAW,QAAXA,WAAW;EACrE,gBAAwBN,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAhCO,KAAK;IAAEC,QAAQ;EAErB,SAASC,WAAW,CAACC,QAAQ,EAAC;IAC1BF,QAAQ,CAACE,QAAQ,CAAC;IAClBN,OAAO,CAACM,QAAQ,CAAC;EAErB;EACA,OACA;IAAA,UAEIP,OAAO,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;MAAA,OACpB,MAAC,IAAI;QAAa,KAAK,EAAE,CAACZ,MAAM,CAACa,oBAAoB,CAAE;QAAA,WACnD,KAAC,IAAI;UAAC,KAAK,EAAEC,MAAM,CAACC,KAAM;UAAA,UAAEJ,IAAI,CAACI;QAAK,EAAQ,EAC9C,KAAC,SAAS;UAAC,KAAK,EAAE,CAACD,MAAM,CAACE,MAAM,EAACX,WAAW,CAAE;UAAC,OAAO,EAAE;YAAA,OAAKG,WAAW,CAACG,IAAI,CAACL,KAAK,CAAC;UAAA,CAAC;UAAA,UAClFA,KAAK,KAAIK,IAAI,CAACL,KAAK,IAAI,KAAC,IAAI;YAAC,KAAK,EAAE,CAACQ,MAAM,CAACG,aAAa,EAACb,KAAK;UAAE;QAAQ,EAChE;MAAA,GAJLQ,KAAK,CAKT;IAAA,CACN;EACJ,EAEF;AAEP"},"metadata":{},"sourceType":"module"}